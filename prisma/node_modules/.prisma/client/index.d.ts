
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Set
 */

export type Set = {
  id: number
  name: string
  authorId: number
}

/**
 * Model Term
 */

export type Term = {
  id: number
  question: string
  answer: string
  explanation: string | null
  setId: number
}

/**
 * Model Option
 */

export type Option = {
  id: number
  option: string
  termId: number
}

/**
 * Model User
 */

export type User = {
  id: number
  username: string
  password: string
}

/**
 * Model UserLearningTerm
 */

export type UserLearningTerm = {
  id: number
  userId: number
  termId: number
  remained: number
  learned: boolean
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Sets
 * const sets = await prisma.set.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Sets
   * const sets = await prisma.set.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.$executeRaw``, values will be escaped automatically
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.$executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.$queryRaw``, values will be escaped automatically
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.$queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.set`: Exposes CRUD operations for the **Set** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sets
    * const sets = await prisma.set.findMany()
    * ```
    */
  get set(): Prisma.SetDelegate<GlobalReject>;

  /**
   * `prisma.term`: Exposes CRUD operations for the **Term** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Terms
    * const terms = await prisma.term.findMany()
    * ```
    */
  get term(): Prisma.TermDelegate<GlobalReject>;

  /**
   * `prisma.option`: Exposes CRUD operations for the **Option** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Options
    * const options = await prisma.option.findMany()
    * ```
    */
  get option(): Prisma.OptionDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.userLearningTerm`: Exposes CRUD operations for the **UserLearningTerm** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserLearningTerms
    * const userLearningTerms = await prisma.userLearningTerm.findMany()
    * ```
    */
  get userLearningTerm(): Prisma.UserLearningTermDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.26.0
   * Query Engine version: 9b816b3aa13cc270074f172f30d6eda8a8ce867d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Set: 'Set',
    Term: 'Term',
    Option: 'Option',
    User: 'User',
    UserLearningTerm: 'UserLearningTerm'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SetCountOutputType
   */


  export type SetCountOutputType = {
    terms: number
  }

  export type SetCountOutputTypeSelect = {
    terms?: boolean
  }

  export type SetCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SetCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SetCountOutputType
    : S extends undefined
    ? never
    : S extends SetCountOutputTypeArgs
    ?'include' extends U
    ? SetCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof SetCountOutputType ?SetCountOutputType [P]
  : 
     never
  } 
    : SetCountOutputType
  : SetCountOutputType




  // Custom InputTypes

  /**
   * SetCountOutputType without action
   */
  export type SetCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SetCountOutputType
     * 
    **/
    select?: SetCountOutputTypeSelect | null
  }



  /**
   * Count Type TermCountOutputType
   */


  export type TermCountOutputType = {
    options: number
    usersLearning: number
  }

  export type TermCountOutputTypeSelect = {
    options?: boolean
    usersLearning?: boolean
  }

  export type TermCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TermCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TermCountOutputType
    : S extends undefined
    ? never
    : S extends TermCountOutputTypeArgs
    ?'include' extends U
    ? TermCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof TermCountOutputType ?TermCountOutputType [P]
  : 
     never
  } 
    : TermCountOutputType
  : TermCountOutputType




  // Custom InputTypes

  /**
   * TermCountOutputType without action
   */
  export type TermCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TermCountOutputType
     * 
    **/
    select?: TermCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    sets: number
    learningTerms: number
  }

  export type UserCountOutputTypeSelect = {
    sets?: boolean
    learningTerms?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserCountOutputType ?UserCountOutputType [P]
  : 
     never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Set
   */


  export type AggregateSet = {
    _count: SetCountAggregateOutputType | null
    count: SetCountAggregateOutputType | null
    _avg: SetAvgAggregateOutputType | null
    avg: SetAvgAggregateOutputType | null
    _sum: SetSumAggregateOutputType | null
    sum: SetSumAggregateOutputType | null
    _min: SetMinAggregateOutputType | null
    min: SetMinAggregateOutputType | null
    _max: SetMaxAggregateOutputType | null
    max: SetMaxAggregateOutputType | null
  }

  export type SetAvgAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type SetSumAggregateOutputType = {
    id: number | null
    authorId: number | null
  }

  export type SetMinAggregateOutputType = {
    id: number | null
    name: string | null
    authorId: number | null
  }

  export type SetMaxAggregateOutputType = {
    id: number | null
    name: string | null
    authorId: number | null
  }

  export type SetCountAggregateOutputType = {
    id: number
    name: number
    authorId: number
    _all: number
  }


  export type SetAvgAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type SetSumAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type SetMinAggregateInputType = {
    id?: true
    name?: true
    authorId?: true
  }

  export type SetMaxAggregateInputType = {
    id?: true
    name?: true
    authorId?: true
  }

  export type SetCountAggregateInputType = {
    id?: true
    name?: true
    authorId?: true
    _all?: true
  }

  export type SetAggregateArgs = {
    /**
     * Filter which Set to aggregate.
     * 
    **/
    where?: SetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sets to fetch.
     * 
    **/
    orderBy?: Enumerable<SetOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sets
    **/
    _count?: true | SetCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | SetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SetAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: SetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SetSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: SetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SetMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: SetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SetMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: SetMaxAggregateInputType
  }

  export type GetSetAggregateType<T extends SetAggregateArgs> = {
        [P in keyof T & keyof AggregateSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSet[P]>
      : GetScalarType<T[P], AggregateSet[P]>
  }


    
    
  export type SetGroupByArgs = {
    where?: SetWhereInput
    orderBy?: Enumerable<SetOrderByInput>
    by: Array<SetScalarFieldEnum>
    having?: SetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SetCountAggregateInputType | true
    _avg?: SetAvgAggregateInputType
    _sum?: SetSumAggregateInputType
    _min?: SetMinAggregateInputType
    _max?: SetMaxAggregateInputType
  }


  export type SetGroupByOutputType = {
    id: number
    name: string
    authorId: number
    _count: SetCountAggregateOutputType | null
    _avg: SetAvgAggregateOutputType | null
    _sum: SetSumAggregateOutputType | null
    _min: SetMinAggregateOutputType | null
    _max: SetMaxAggregateOutputType | null
  }

  type GetSetGroupByPayload<T extends SetGroupByArgs> = Promise<
    Array<
      PickArray<SetGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof SetGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], SetGroupByOutputType[P]> 
            : GetScalarType<T[P], SetGroupByOutputType[P]>
        }
      > 
    >


  export type SetSelect = {
    id?: boolean
    name?: boolean
    author?: boolean | UserArgs
    authorId?: boolean
    terms?: boolean | TermFindManyArgs
    _count?: boolean | SetCountOutputTypeArgs
  }

  export type SetInclude = {
    author?: boolean | UserArgs
    terms?: boolean | TermFindManyArgs
    _count?: boolean | SetCountOutputTypeArgs
  }

  export type SetGetPayload<
    S extends boolean | null | undefined | SetArgs,
    U = keyof S
      > = S extends true
        ? Set
    : S extends undefined
    ? never
    : S extends SetArgs | SetFindManyArgs
    ?'include' extends U
    ? Set  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'author'
        ? UserGetPayload<S['include'][P]> :
        P extends 'terms'
        ? Array < TermGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? SetCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Set ?Set [P]
  : 
          P extends 'author'
        ? UserGetPayload<S['select'][P]> :
        P extends 'terms'
        ? Array < TermGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? SetCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : Set
  : Set


  type SetCountArgs = Merge<
    Omit<SetFindManyArgs, 'select' | 'include'> & {
      select?: SetCountAggregateInputType | true
    }
  >

  export interface SetDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Set that matches the filter.
     * @param {SetFindUniqueArgs} args - Arguments to find a Set
     * @example
     * // Get one Set
     * const set = await prisma.set.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SetFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SetFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Set'> extends True ? CheckSelect<T, Prisma__SetClient<Set>, Prisma__SetClient<SetGetPayload<T>>> : CheckSelect<T, Prisma__SetClient<Set | null >, Prisma__SetClient<SetGetPayload<T> | null >>

    /**
     * Find the first Set that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetFindFirstArgs} args - Arguments to find a Set
     * @example
     * // Get one Set
     * const set = await prisma.set.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SetFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SetFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Set'> extends True ? CheckSelect<T, Prisma__SetClient<Set>, Prisma__SetClient<SetGetPayload<T>>> : CheckSelect<T, Prisma__SetClient<Set | null >, Prisma__SetClient<SetGetPayload<T> | null >>

    /**
     * Find zero or more Sets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sets
     * const sets = await prisma.set.findMany()
     * 
     * // Get first 10 Sets
     * const sets = await prisma.set.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const setWithIdOnly = await prisma.set.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SetFindManyArgs>(
      args?: SelectSubset<T, SetFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Set>>, PrismaPromise<Array<SetGetPayload<T>>>>

    /**
     * Create a Set.
     * @param {SetCreateArgs} args - Arguments to create a Set.
     * @example
     * // Create one Set
     * const Set = await prisma.set.create({
     *   data: {
     *     // ... data to create a Set
     *   }
     * })
     * 
    **/
    create<T extends SetCreateArgs>(
      args: SelectSubset<T, SetCreateArgs>
    ): CheckSelect<T, Prisma__SetClient<Set>, Prisma__SetClient<SetGetPayload<T>>>

    /**
     * Create many Sets.
     *     @param {SetCreateManyArgs} args - Arguments to create many Sets.
     *     @example
     *     // Create many Sets
     *     const set = await prisma.set.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SetCreateManyArgs>(
      args?: SelectSubset<T, SetCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Set.
     * @param {SetDeleteArgs} args - Arguments to delete one Set.
     * @example
     * // Delete one Set
     * const Set = await prisma.set.delete({
     *   where: {
     *     // ... filter to delete one Set
     *   }
     * })
     * 
    **/
    delete<T extends SetDeleteArgs>(
      args: SelectSubset<T, SetDeleteArgs>
    ): CheckSelect<T, Prisma__SetClient<Set>, Prisma__SetClient<SetGetPayload<T>>>

    /**
     * Update one Set.
     * @param {SetUpdateArgs} args - Arguments to update one Set.
     * @example
     * // Update one Set
     * const set = await prisma.set.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SetUpdateArgs>(
      args: SelectSubset<T, SetUpdateArgs>
    ): CheckSelect<T, Prisma__SetClient<Set>, Prisma__SetClient<SetGetPayload<T>>>

    /**
     * Delete zero or more Sets.
     * @param {SetDeleteManyArgs} args - Arguments to filter Sets to delete.
     * @example
     * // Delete a few Sets
     * const { count } = await prisma.set.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SetDeleteManyArgs>(
      args?: SelectSubset<T, SetDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sets
     * const set = await prisma.set.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SetUpdateManyArgs>(
      args: SelectSubset<T, SetUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Set.
     * @param {SetUpsertArgs} args - Arguments to update or create a Set.
     * @example
     * // Update or create a Set
     * const set = await prisma.set.upsert({
     *   create: {
     *     // ... data to create a Set
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Set we want to update
     *   }
     * })
    **/
    upsert<T extends SetUpsertArgs>(
      args: SelectSubset<T, SetUpsertArgs>
    ): CheckSelect<T, Prisma__SetClient<Set>, Prisma__SetClient<SetGetPayload<T>>>

    /**
     * Count the number of Sets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetCountArgs} args - Arguments to filter Sets to count.
     * @example
     * // Count the number of Sets
     * const count = await prisma.set.count({
     *   where: {
     *     // ... the filter for the Sets we want to count
     *   }
     * })
    **/
    count<T extends SetCountArgs>(
      args?: Subset<T, SetCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Set.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SetAggregateArgs>(args: Subset<T, SetAggregateArgs>): PrismaPromise<GetSetAggregateType<T>>

    /**
     * Group by Set.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SetGroupByArgs['orderBy'] }
        : { orderBy?: SetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSetGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Set.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SetClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    author<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    terms<T extends TermFindManyArgs = {}>(args?: Subset<T, TermFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Term>>, PrismaPromise<Array<TermGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Set findUnique
   */
  export type SetFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Set
     * 
    **/
    select?: SetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SetInclude | null
    /**
     * Throw an Error if a Set can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Set to fetch.
     * 
    **/
    where: SetWhereUniqueInput
  }


  /**
   * Set findFirst
   */
  export type SetFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Set
     * 
    **/
    select?: SetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SetInclude | null
    /**
     * Throw an Error if a Set can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Set to fetch.
     * 
    **/
    where?: SetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sets to fetch.
     * 
    **/
    orderBy?: Enumerable<SetOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sets.
     * 
    **/
    cursor?: SetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sets.
     * 
    **/
    distinct?: Enumerable<SetScalarFieldEnum>
  }


  /**
   * Set findMany
   */
  export type SetFindManyArgs = {
    /**
     * Select specific fields to fetch from the Set
     * 
    **/
    select?: SetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SetInclude | null
    /**
     * Filter, which Sets to fetch.
     * 
    **/
    where?: SetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sets to fetch.
     * 
    **/
    orderBy?: Enumerable<SetOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sets.
     * 
    **/
    cursor?: SetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sets.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SetScalarFieldEnum>
  }


  /**
   * Set create
   */
  export type SetCreateArgs = {
    /**
     * Select specific fields to fetch from the Set
     * 
    **/
    select?: SetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SetInclude | null
    /**
     * The data needed to create a Set.
     * 
    **/
    data: XOR<SetCreateInput, SetUncheckedCreateInput>
  }


  /**
   * Set createMany
   */
  export type SetCreateManyArgs = {
    data: Enumerable<SetCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Set update
   */
  export type SetUpdateArgs = {
    /**
     * Select specific fields to fetch from the Set
     * 
    **/
    select?: SetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SetInclude | null
    /**
     * The data needed to update a Set.
     * 
    **/
    data: XOR<SetUpdateInput, SetUncheckedUpdateInput>
    /**
     * Choose, which Set to update.
     * 
    **/
    where: SetWhereUniqueInput
  }


  /**
   * Set updateMany
   */
  export type SetUpdateManyArgs = {
    data: XOR<SetUpdateManyMutationInput, SetUncheckedUpdateManyInput>
    where?: SetWhereInput
  }


  /**
   * Set upsert
   */
  export type SetUpsertArgs = {
    /**
     * Select specific fields to fetch from the Set
     * 
    **/
    select?: SetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SetInclude | null
    /**
     * The filter to search for the Set to update in case it exists.
     * 
    **/
    where: SetWhereUniqueInput
    /**
     * In case the Set found by the `where` argument doesn't exist, create a new Set with this data.
     * 
    **/
    create: XOR<SetCreateInput, SetUncheckedCreateInput>
    /**
     * In case the Set was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SetUpdateInput, SetUncheckedUpdateInput>
  }


  /**
   * Set delete
   */
  export type SetDeleteArgs = {
    /**
     * Select specific fields to fetch from the Set
     * 
    **/
    select?: SetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SetInclude | null
    /**
     * Filter which Set to delete.
     * 
    **/
    where: SetWhereUniqueInput
  }


  /**
   * Set deleteMany
   */
  export type SetDeleteManyArgs = {
    where?: SetWhereInput
  }


  /**
   * Set without action
   */
  export type SetArgs = {
    /**
     * Select specific fields to fetch from the Set
     * 
    **/
    select?: SetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SetInclude | null
  }



  /**
   * Model Term
   */


  export type AggregateTerm = {
    _count: TermCountAggregateOutputType | null
    count: TermCountAggregateOutputType | null
    _avg: TermAvgAggregateOutputType | null
    avg: TermAvgAggregateOutputType | null
    _sum: TermSumAggregateOutputType | null
    sum: TermSumAggregateOutputType | null
    _min: TermMinAggregateOutputType | null
    min: TermMinAggregateOutputType | null
    _max: TermMaxAggregateOutputType | null
    max: TermMaxAggregateOutputType | null
  }

  export type TermAvgAggregateOutputType = {
    id: number | null
    setId: number | null
  }

  export type TermSumAggregateOutputType = {
    id: number | null
    setId: number | null
  }

  export type TermMinAggregateOutputType = {
    id: number | null
    question: string | null
    answer: string | null
    explanation: string | null
    setId: number | null
  }

  export type TermMaxAggregateOutputType = {
    id: number | null
    question: string | null
    answer: string | null
    explanation: string | null
    setId: number | null
  }

  export type TermCountAggregateOutputType = {
    id: number
    question: number
    answer: number
    explanation: number
    setId: number
    _all: number
  }


  export type TermAvgAggregateInputType = {
    id?: true
    setId?: true
  }

  export type TermSumAggregateInputType = {
    id?: true
    setId?: true
  }

  export type TermMinAggregateInputType = {
    id?: true
    question?: true
    answer?: true
    explanation?: true
    setId?: true
  }

  export type TermMaxAggregateInputType = {
    id?: true
    question?: true
    answer?: true
    explanation?: true
    setId?: true
  }

  export type TermCountAggregateInputType = {
    id?: true
    question?: true
    answer?: true
    explanation?: true
    setId?: true
    _all?: true
  }

  export type TermAggregateArgs = {
    /**
     * Filter which Term to aggregate.
     * 
    **/
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     * 
    **/
    orderBy?: Enumerable<TermOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Terms
    **/
    _count?: true | TermCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | TermCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TermAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: TermAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TermSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: TermSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TermMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: TermMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TermMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: TermMaxAggregateInputType
  }

  export type GetTermAggregateType<T extends TermAggregateArgs> = {
        [P in keyof T & keyof AggregateTerm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTerm[P]>
      : GetScalarType<T[P], AggregateTerm[P]>
  }


    
    
  export type TermGroupByArgs = {
    where?: TermWhereInput
    orderBy?: Enumerable<TermOrderByInput>
    by: Array<TermScalarFieldEnum>
    having?: TermScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TermCountAggregateInputType | true
    _avg?: TermAvgAggregateInputType
    _sum?: TermSumAggregateInputType
    _min?: TermMinAggregateInputType
    _max?: TermMaxAggregateInputType
  }


  export type TermGroupByOutputType = {
    id: number
    question: string
    answer: string
    explanation: string | null
    setId: number
    _count: TermCountAggregateOutputType | null
    _avg: TermAvgAggregateOutputType | null
    _sum: TermSumAggregateOutputType | null
    _min: TermMinAggregateOutputType | null
    _max: TermMaxAggregateOutputType | null
  }

  type GetTermGroupByPayload<T extends TermGroupByArgs> = Promise<
    Array<
      PickArray<TermGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof TermGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], TermGroupByOutputType[P]> 
            : GetScalarType<T[P], TermGroupByOutputType[P]>
        }
      > 
    >


  export type TermSelect = {
    id?: boolean
    question?: boolean
    answer?: boolean
    explanation?: boolean
    set?: boolean | SetArgs
    setId?: boolean
    options?: boolean | OptionFindManyArgs
    usersLearning?: boolean | UserLearningTermFindManyArgs
    _count?: boolean | TermCountOutputTypeArgs
  }

  export type TermInclude = {
    set?: boolean | SetArgs
    options?: boolean | OptionFindManyArgs
    usersLearning?: boolean | UserLearningTermFindManyArgs
    _count?: boolean | TermCountOutputTypeArgs
  }

  export type TermGetPayload<
    S extends boolean | null | undefined | TermArgs,
    U = keyof S
      > = S extends true
        ? Term
    : S extends undefined
    ? never
    : S extends TermArgs | TermFindManyArgs
    ?'include' extends U
    ? Term  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'set'
        ? SetGetPayload<S['include'][P]> :
        P extends 'options'
        ? Array < OptionGetPayload<S['include'][P]>>  :
        P extends 'usersLearning'
        ? Array < UserLearningTermGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? TermCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Term ?Term [P]
  : 
          P extends 'set'
        ? SetGetPayload<S['select'][P]> :
        P extends 'options'
        ? Array < OptionGetPayload<S['select'][P]>>  :
        P extends 'usersLearning'
        ? Array < UserLearningTermGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? TermCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : Term
  : Term


  type TermCountArgs = Merge<
    Omit<TermFindManyArgs, 'select' | 'include'> & {
      select?: TermCountAggregateInputType | true
    }
  >

  export interface TermDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Term that matches the filter.
     * @param {TermFindUniqueArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TermFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TermFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Term'> extends True ? CheckSelect<T, Prisma__TermClient<Term>, Prisma__TermClient<TermGetPayload<T>>> : CheckSelect<T, Prisma__TermClient<Term | null >, Prisma__TermClient<TermGetPayload<T> | null >>

    /**
     * Find the first Term that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermFindFirstArgs} args - Arguments to find a Term
     * @example
     * // Get one Term
     * const term = await prisma.term.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TermFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TermFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Term'> extends True ? CheckSelect<T, Prisma__TermClient<Term>, Prisma__TermClient<TermGetPayload<T>>> : CheckSelect<T, Prisma__TermClient<Term | null >, Prisma__TermClient<TermGetPayload<T> | null >>

    /**
     * Find zero or more Terms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Terms
     * const terms = await prisma.term.findMany()
     * 
     * // Get first 10 Terms
     * const terms = await prisma.term.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const termWithIdOnly = await prisma.term.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TermFindManyArgs>(
      args?: SelectSubset<T, TermFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Term>>, PrismaPromise<Array<TermGetPayload<T>>>>

    /**
     * Create a Term.
     * @param {TermCreateArgs} args - Arguments to create a Term.
     * @example
     * // Create one Term
     * const Term = await prisma.term.create({
     *   data: {
     *     // ... data to create a Term
     *   }
     * })
     * 
    **/
    create<T extends TermCreateArgs>(
      args: SelectSubset<T, TermCreateArgs>
    ): CheckSelect<T, Prisma__TermClient<Term>, Prisma__TermClient<TermGetPayload<T>>>

    /**
     * Create many Terms.
     *     @param {TermCreateManyArgs} args - Arguments to create many Terms.
     *     @example
     *     // Create many Terms
     *     const term = await prisma.term.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TermCreateManyArgs>(
      args?: SelectSubset<T, TermCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Term.
     * @param {TermDeleteArgs} args - Arguments to delete one Term.
     * @example
     * // Delete one Term
     * const Term = await prisma.term.delete({
     *   where: {
     *     // ... filter to delete one Term
     *   }
     * })
     * 
    **/
    delete<T extends TermDeleteArgs>(
      args: SelectSubset<T, TermDeleteArgs>
    ): CheckSelect<T, Prisma__TermClient<Term>, Prisma__TermClient<TermGetPayload<T>>>

    /**
     * Update one Term.
     * @param {TermUpdateArgs} args - Arguments to update one Term.
     * @example
     * // Update one Term
     * const term = await prisma.term.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TermUpdateArgs>(
      args: SelectSubset<T, TermUpdateArgs>
    ): CheckSelect<T, Prisma__TermClient<Term>, Prisma__TermClient<TermGetPayload<T>>>

    /**
     * Delete zero or more Terms.
     * @param {TermDeleteManyArgs} args - Arguments to filter Terms to delete.
     * @example
     * // Delete a few Terms
     * const { count } = await prisma.term.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TermDeleteManyArgs>(
      args?: SelectSubset<T, TermDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Terms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Terms
     * const term = await prisma.term.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TermUpdateManyArgs>(
      args: SelectSubset<T, TermUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Term.
     * @param {TermUpsertArgs} args - Arguments to update or create a Term.
     * @example
     * // Update or create a Term
     * const term = await prisma.term.upsert({
     *   create: {
     *     // ... data to create a Term
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Term we want to update
     *   }
     * })
    **/
    upsert<T extends TermUpsertArgs>(
      args: SelectSubset<T, TermUpsertArgs>
    ): CheckSelect<T, Prisma__TermClient<Term>, Prisma__TermClient<TermGetPayload<T>>>

    /**
     * Count the number of Terms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermCountArgs} args - Arguments to filter Terms to count.
     * @example
     * // Count the number of Terms
     * const count = await prisma.term.count({
     *   where: {
     *     // ... the filter for the Terms we want to count
     *   }
     * })
    **/
    count<T extends TermCountArgs>(
      args?: Subset<T, TermCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TermCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Term.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TermAggregateArgs>(args: Subset<T, TermAggregateArgs>): PrismaPromise<GetTermAggregateType<T>>

    /**
     * Group by Term.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TermGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TermGroupByArgs['orderBy'] }
        : { orderBy?: TermGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TermGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTermGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Term.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TermClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    set<T extends SetArgs = {}>(args?: Subset<T, SetArgs>): CheckSelect<T, Prisma__SetClient<Set | null >, Prisma__SetClient<SetGetPayload<T> | null >>;

    options<T extends OptionFindManyArgs = {}>(args?: Subset<T, OptionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Option>>, PrismaPromise<Array<OptionGetPayload<T>>>>;

    usersLearning<T extends UserLearningTermFindManyArgs = {}>(args?: Subset<T, UserLearningTermFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserLearningTerm>>, PrismaPromise<Array<UserLearningTermGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Term findUnique
   */
  export type TermFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Term
     * 
    **/
    select?: TermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermInclude | null
    /**
     * Throw an Error if a Term can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Term to fetch.
     * 
    **/
    where: TermWhereUniqueInput
  }


  /**
   * Term findFirst
   */
  export type TermFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Term
     * 
    **/
    select?: TermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermInclude | null
    /**
     * Throw an Error if a Term can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Term to fetch.
     * 
    **/
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     * 
    **/
    orderBy?: Enumerable<TermOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Terms.
     * 
    **/
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Terms.
     * 
    **/
    distinct?: Enumerable<TermScalarFieldEnum>
  }


  /**
   * Term findMany
   */
  export type TermFindManyArgs = {
    /**
     * Select specific fields to fetch from the Term
     * 
    **/
    select?: TermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermInclude | null
    /**
     * Filter, which Terms to fetch.
     * 
    **/
    where?: TermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Terms to fetch.
     * 
    **/
    orderBy?: Enumerable<TermOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Terms.
     * 
    **/
    cursor?: TermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Terms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Terms.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TermScalarFieldEnum>
  }


  /**
   * Term create
   */
  export type TermCreateArgs = {
    /**
     * Select specific fields to fetch from the Term
     * 
    **/
    select?: TermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermInclude | null
    /**
     * The data needed to create a Term.
     * 
    **/
    data: XOR<TermCreateInput, TermUncheckedCreateInput>
  }


  /**
   * Term createMany
   */
  export type TermCreateManyArgs = {
    data: Enumerable<TermCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Term update
   */
  export type TermUpdateArgs = {
    /**
     * Select specific fields to fetch from the Term
     * 
    **/
    select?: TermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermInclude | null
    /**
     * The data needed to update a Term.
     * 
    **/
    data: XOR<TermUpdateInput, TermUncheckedUpdateInput>
    /**
     * Choose, which Term to update.
     * 
    **/
    where: TermWhereUniqueInput
  }


  /**
   * Term updateMany
   */
  export type TermUpdateManyArgs = {
    data: XOR<TermUpdateManyMutationInput, TermUncheckedUpdateManyInput>
    where?: TermWhereInput
  }


  /**
   * Term upsert
   */
  export type TermUpsertArgs = {
    /**
     * Select specific fields to fetch from the Term
     * 
    **/
    select?: TermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermInclude | null
    /**
     * The filter to search for the Term to update in case it exists.
     * 
    **/
    where: TermWhereUniqueInput
    /**
     * In case the Term found by the `where` argument doesn't exist, create a new Term with this data.
     * 
    **/
    create: XOR<TermCreateInput, TermUncheckedCreateInput>
    /**
     * In case the Term was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TermUpdateInput, TermUncheckedUpdateInput>
  }


  /**
   * Term delete
   */
  export type TermDeleteArgs = {
    /**
     * Select specific fields to fetch from the Term
     * 
    **/
    select?: TermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermInclude | null
    /**
     * Filter which Term to delete.
     * 
    **/
    where: TermWhereUniqueInput
  }


  /**
   * Term deleteMany
   */
  export type TermDeleteManyArgs = {
    where?: TermWhereInput
  }


  /**
   * Term without action
   */
  export type TermArgs = {
    /**
     * Select specific fields to fetch from the Term
     * 
    **/
    select?: TermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TermInclude | null
  }



  /**
   * Model Option
   */


  export type AggregateOption = {
    _count: OptionCountAggregateOutputType | null
    count: OptionCountAggregateOutputType | null
    _avg: OptionAvgAggregateOutputType | null
    avg: OptionAvgAggregateOutputType | null
    _sum: OptionSumAggregateOutputType | null
    sum: OptionSumAggregateOutputType | null
    _min: OptionMinAggregateOutputType | null
    min: OptionMinAggregateOutputType | null
    _max: OptionMaxAggregateOutputType | null
    max: OptionMaxAggregateOutputType | null
  }

  export type OptionAvgAggregateOutputType = {
    id: number | null
    termId: number | null
  }

  export type OptionSumAggregateOutputType = {
    id: number | null
    termId: number | null
  }

  export type OptionMinAggregateOutputType = {
    id: number | null
    option: string | null
    termId: number | null
  }

  export type OptionMaxAggregateOutputType = {
    id: number | null
    option: string | null
    termId: number | null
  }

  export type OptionCountAggregateOutputType = {
    id: number
    option: number
    termId: number
    _all: number
  }


  export type OptionAvgAggregateInputType = {
    id?: true
    termId?: true
  }

  export type OptionSumAggregateInputType = {
    id?: true
    termId?: true
  }

  export type OptionMinAggregateInputType = {
    id?: true
    option?: true
    termId?: true
  }

  export type OptionMaxAggregateInputType = {
    id?: true
    option?: true
    termId?: true
  }

  export type OptionCountAggregateInputType = {
    id?: true
    option?: true
    termId?: true
    _all?: true
  }

  export type OptionAggregateArgs = {
    /**
     * Filter which Option to aggregate.
     * 
    **/
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     * 
    **/
    orderBy?: Enumerable<OptionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Options
    **/
    _count?: true | OptionCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | OptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OptionAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: OptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OptionSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: OptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OptionMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: OptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OptionMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: OptionMaxAggregateInputType
  }

  export type GetOptionAggregateType<T extends OptionAggregateArgs> = {
        [P in keyof T & keyof AggregateOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOption[P]>
      : GetScalarType<T[P], AggregateOption[P]>
  }


    
    
  export type OptionGroupByArgs = {
    where?: OptionWhereInput
    orderBy?: Enumerable<OptionOrderByInput>
    by: Array<OptionScalarFieldEnum>
    having?: OptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OptionCountAggregateInputType | true
    _avg?: OptionAvgAggregateInputType
    _sum?: OptionSumAggregateInputType
    _min?: OptionMinAggregateInputType
    _max?: OptionMaxAggregateInputType
  }


  export type OptionGroupByOutputType = {
    id: number
    option: string
    termId: number
    _count: OptionCountAggregateOutputType | null
    _avg: OptionAvgAggregateOutputType | null
    _sum: OptionSumAggregateOutputType | null
    _min: OptionMinAggregateOutputType | null
    _max: OptionMaxAggregateOutputType | null
  }

  type GetOptionGroupByPayload<T extends OptionGroupByArgs> = Promise<
    Array<
      PickArray<OptionGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof OptionGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], OptionGroupByOutputType[P]> 
            : GetScalarType<T[P], OptionGroupByOutputType[P]>
        }
      > 
    >


  export type OptionSelect = {
    id?: boolean
    option?: boolean
    term?: boolean | TermArgs
    termId?: boolean
  }

  export type OptionInclude = {
    term?: boolean | TermArgs
  }

  export type OptionGetPayload<
    S extends boolean | null | undefined | OptionArgs,
    U = keyof S
      > = S extends true
        ? Option
    : S extends undefined
    ? never
    : S extends OptionArgs | OptionFindManyArgs
    ?'include' extends U
    ? Option  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'term'
        ? TermGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Option ?Option [P]
  : 
          P extends 'term'
        ? TermGetPayload<S['select'][P]> : never
  } 
    : Option
  : Option


  type OptionCountArgs = Merge<
    Omit<OptionFindManyArgs, 'select' | 'include'> & {
      select?: OptionCountAggregateInputType | true
    }
  >

  export interface OptionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Option that matches the filter.
     * @param {OptionFindUniqueArgs} args - Arguments to find a Option
     * @example
     * // Get one Option
     * const option = await prisma.option.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OptionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OptionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Option'> extends True ? CheckSelect<T, Prisma__OptionClient<Option>, Prisma__OptionClient<OptionGetPayload<T>>> : CheckSelect<T, Prisma__OptionClient<Option | null >, Prisma__OptionClient<OptionGetPayload<T> | null >>

    /**
     * Find the first Option that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionFindFirstArgs} args - Arguments to find a Option
     * @example
     * // Get one Option
     * const option = await prisma.option.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OptionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OptionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Option'> extends True ? CheckSelect<T, Prisma__OptionClient<Option>, Prisma__OptionClient<OptionGetPayload<T>>> : CheckSelect<T, Prisma__OptionClient<Option | null >, Prisma__OptionClient<OptionGetPayload<T> | null >>

    /**
     * Find zero or more Options that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Options
     * const options = await prisma.option.findMany()
     * 
     * // Get first 10 Options
     * const options = await prisma.option.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const optionWithIdOnly = await prisma.option.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OptionFindManyArgs>(
      args?: SelectSubset<T, OptionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Option>>, PrismaPromise<Array<OptionGetPayload<T>>>>

    /**
     * Create a Option.
     * @param {OptionCreateArgs} args - Arguments to create a Option.
     * @example
     * // Create one Option
     * const Option = await prisma.option.create({
     *   data: {
     *     // ... data to create a Option
     *   }
     * })
     * 
    **/
    create<T extends OptionCreateArgs>(
      args: SelectSubset<T, OptionCreateArgs>
    ): CheckSelect<T, Prisma__OptionClient<Option>, Prisma__OptionClient<OptionGetPayload<T>>>

    /**
     * Create many Options.
     *     @param {OptionCreateManyArgs} args - Arguments to create many Options.
     *     @example
     *     // Create many Options
     *     const option = await prisma.option.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OptionCreateManyArgs>(
      args?: SelectSubset<T, OptionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Option.
     * @param {OptionDeleteArgs} args - Arguments to delete one Option.
     * @example
     * // Delete one Option
     * const Option = await prisma.option.delete({
     *   where: {
     *     // ... filter to delete one Option
     *   }
     * })
     * 
    **/
    delete<T extends OptionDeleteArgs>(
      args: SelectSubset<T, OptionDeleteArgs>
    ): CheckSelect<T, Prisma__OptionClient<Option>, Prisma__OptionClient<OptionGetPayload<T>>>

    /**
     * Update one Option.
     * @param {OptionUpdateArgs} args - Arguments to update one Option.
     * @example
     * // Update one Option
     * const option = await prisma.option.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OptionUpdateArgs>(
      args: SelectSubset<T, OptionUpdateArgs>
    ): CheckSelect<T, Prisma__OptionClient<Option>, Prisma__OptionClient<OptionGetPayload<T>>>

    /**
     * Delete zero or more Options.
     * @param {OptionDeleteManyArgs} args - Arguments to filter Options to delete.
     * @example
     * // Delete a few Options
     * const { count } = await prisma.option.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OptionDeleteManyArgs>(
      args?: SelectSubset<T, OptionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Options
     * const option = await prisma.option.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OptionUpdateManyArgs>(
      args: SelectSubset<T, OptionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Option.
     * @param {OptionUpsertArgs} args - Arguments to update or create a Option.
     * @example
     * // Update or create a Option
     * const option = await prisma.option.upsert({
     *   create: {
     *     // ... data to create a Option
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Option we want to update
     *   }
     * })
    **/
    upsert<T extends OptionUpsertArgs>(
      args: SelectSubset<T, OptionUpsertArgs>
    ): CheckSelect<T, Prisma__OptionClient<Option>, Prisma__OptionClient<OptionGetPayload<T>>>

    /**
     * Count the number of Options.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionCountArgs} args - Arguments to filter Options to count.
     * @example
     * // Count the number of Options
     * const count = await prisma.option.count({
     *   where: {
     *     // ... the filter for the Options we want to count
     *   }
     * })
    **/
    count<T extends OptionCountArgs>(
      args?: Subset<T, OptionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Option.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OptionAggregateArgs>(args: Subset<T, OptionAggregateArgs>): PrismaPromise<GetOptionAggregateType<T>>

    /**
     * Group by Option.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OptionGroupByArgs['orderBy'] }
        : { orderBy?: OptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOptionGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Option.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OptionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    term<T extends TermArgs = {}>(args?: Subset<T, TermArgs>): CheckSelect<T, Prisma__TermClient<Term | null >, Prisma__TermClient<TermGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Option findUnique
   */
  export type OptionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Option
     * 
    **/
    select?: OptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OptionInclude | null
    /**
     * Throw an Error if a Option can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Option to fetch.
     * 
    **/
    where: OptionWhereUniqueInput
  }


  /**
   * Option findFirst
   */
  export type OptionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Option
     * 
    **/
    select?: OptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OptionInclude | null
    /**
     * Throw an Error if a Option can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Option to fetch.
     * 
    **/
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     * 
    **/
    orderBy?: Enumerable<OptionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Options.
     * 
    **/
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Options.
     * 
    **/
    distinct?: Enumerable<OptionScalarFieldEnum>
  }


  /**
   * Option findMany
   */
  export type OptionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Option
     * 
    **/
    select?: OptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OptionInclude | null
    /**
     * Filter, which Options to fetch.
     * 
    **/
    where?: OptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Options to fetch.
     * 
    **/
    orderBy?: Enumerable<OptionOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Options.
     * 
    **/
    cursor?: OptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Options from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Options.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OptionScalarFieldEnum>
  }


  /**
   * Option create
   */
  export type OptionCreateArgs = {
    /**
     * Select specific fields to fetch from the Option
     * 
    **/
    select?: OptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OptionInclude | null
    /**
     * The data needed to create a Option.
     * 
    **/
    data: XOR<OptionCreateInput, OptionUncheckedCreateInput>
  }


  /**
   * Option createMany
   */
  export type OptionCreateManyArgs = {
    data: Enumerable<OptionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Option update
   */
  export type OptionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Option
     * 
    **/
    select?: OptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OptionInclude | null
    /**
     * The data needed to update a Option.
     * 
    **/
    data: XOR<OptionUpdateInput, OptionUncheckedUpdateInput>
    /**
     * Choose, which Option to update.
     * 
    **/
    where: OptionWhereUniqueInput
  }


  /**
   * Option updateMany
   */
  export type OptionUpdateManyArgs = {
    data: XOR<OptionUpdateManyMutationInput, OptionUncheckedUpdateManyInput>
    where?: OptionWhereInput
  }


  /**
   * Option upsert
   */
  export type OptionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Option
     * 
    **/
    select?: OptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OptionInclude | null
    /**
     * The filter to search for the Option to update in case it exists.
     * 
    **/
    where: OptionWhereUniqueInput
    /**
     * In case the Option found by the `where` argument doesn't exist, create a new Option with this data.
     * 
    **/
    create: XOR<OptionCreateInput, OptionUncheckedCreateInput>
    /**
     * In case the Option was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OptionUpdateInput, OptionUncheckedUpdateInput>
  }


  /**
   * Option delete
   */
  export type OptionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Option
     * 
    **/
    select?: OptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OptionInclude | null
    /**
     * Filter which Option to delete.
     * 
    **/
    where: OptionWhereUniqueInput
  }


  /**
   * Option deleteMany
   */
  export type OptionDeleteManyArgs = {
    where?: OptionWhereInput
  }


  /**
   * Option without action
   */
  export type OptionArgs = {
    /**
     * Select specific fields to fetch from the Option
     * 
    **/
    select?: OptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OptionInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }


    
    
  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    username: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UserGroupByOutputType[P]> 
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      > 
    >


  export type UserSelect = {
    id?: boolean
    username?: boolean
    password?: boolean
    sets?: boolean | SetFindManyArgs
    learningTerms?: boolean | UserLearningTermFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    sets?: boolean | SetFindManyArgs
    learningTerms?: boolean | UserLearningTermFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'sets'
        ? Array < SetGetPayload<S['include'][P]>>  :
        P extends 'learningTerms'
        ? Array < UserLearningTermGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'sets'
        ? Array < SetGetPayload<S['select'][P]>>  :
        P extends 'learningTerms'
        ? Array < UserLearningTermGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? UserCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sets<T extends SetFindManyArgs = {}>(args?: Subset<T, SetFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Set>>, PrismaPromise<Array<SetGetPayload<T>>>>;

    learningTerms<T extends UserLearningTermFindManyArgs = {}>(args?: Subset<T, UserLearningTermFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserLearningTerm>>, PrismaPromise<Array<UserLearningTermGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model UserLearningTerm
   */


  export type AggregateUserLearningTerm = {
    _count: UserLearningTermCountAggregateOutputType | null
    count: UserLearningTermCountAggregateOutputType | null
    _avg: UserLearningTermAvgAggregateOutputType | null
    avg: UserLearningTermAvgAggregateOutputType | null
    _sum: UserLearningTermSumAggregateOutputType | null
    sum: UserLearningTermSumAggregateOutputType | null
    _min: UserLearningTermMinAggregateOutputType | null
    min: UserLearningTermMinAggregateOutputType | null
    _max: UserLearningTermMaxAggregateOutputType | null
    max: UserLearningTermMaxAggregateOutputType | null
  }

  export type UserLearningTermAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    termId: number | null
    remained: number | null
  }

  export type UserLearningTermSumAggregateOutputType = {
    id: number | null
    userId: number | null
    termId: number | null
    remained: number | null
  }

  export type UserLearningTermMinAggregateOutputType = {
    id: number | null
    userId: number | null
    termId: number | null
    remained: number | null
    learned: boolean | null
  }

  export type UserLearningTermMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    termId: number | null
    remained: number | null
    learned: boolean | null
  }

  export type UserLearningTermCountAggregateOutputType = {
    id: number
    userId: number
    termId: number
    remained: number
    learned: number
    _all: number
  }


  export type UserLearningTermAvgAggregateInputType = {
    id?: true
    userId?: true
    termId?: true
    remained?: true
  }

  export type UserLearningTermSumAggregateInputType = {
    id?: true
    userId?: true
    termId?: true
    remained?: true
  }

  export type UserLearningTermMinAggregateInputType = {
    id?: true
    userId?: true
    termId?: true
    remained?: true
    learned?: true
  }

  export type UserLearningTermMaxAggregateInputType = {
    id?: true
    userId?: true
    termId?: true
    remained?: true
    learned?: true
  }

  export type UserLearningTermCountAggregateInputType = {
    id?: true
    userId?: true
    termId?: true
    remained?: true
    learned?: true
    _all?: true
  }

  export type UserLearningTermAggregateArgs = {
    /**
     * Filter which UserLearningTerm to aggregate.
     * 
    **/
    where?: UserLearningTermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLearningTerms to fetch.
     * 
    **/
    orderBy?: Enumerable<UserLearningTermOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserLearningTermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLearningTerms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLearningTerms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserLearningTerms
    **/
    _count?: true | UserLearningTermCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | UserLearningTermCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserLearningTermAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: UserLearningTermAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserLearningTermSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: UserLearningTermSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserLearningTermMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: UserLearningTermMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserLearningTermMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: UserLearningTermMaxAggregateInputType
  }

  export type GetUserLearningTermAggregateType<T extends UserLearningTermAggregateArgs> = {
        [P in keyof T & keyof AggregateUserLearningTerm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserLearningTerm[P]>
      : GetScalarType<T[P], AggregateUserLearningTerm[P]>
  }


    
    
  export type UserLearningTermGroupByArgs = {
    where?: UserLearningTermWhereInput
    orderBy?: Enumerable<UserLearningTermOrderByInput>
    by: Array<UserLearningTermScalarFieldEnum>
    having?: UserLearningTermScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserLearningTermCountAggregateInputType | true
    _avg?: UserLearningTermAvgAggregateInputType
    _sum?: UserLearningTermSumAggregateInputType
    _min?: UserLearningTermMinAggregateInputType
    _max?: UserLearningTermMaxAggregateInputType
  }


  export type UserLearningTermGroupByOutputType = {
    id: number
    userId: number
    termId: number
    remained: number
    learned: boolean
    _count: UserLearningTermCountAggregateOutputType | null
    _avg: UserLearningTermAvgAggregateOutputType | null
    _sum: UserLearningTermSumAggregateOutputType | null
    _min: UserLearningTermMinAggregateOutputType | null
    _max: UserLearningTermMaxAggregateOutputType | null
  }

  type GetUserLearningTermGroupByPayload<T extends UserLearningTermGroupByArgs> = Promise<
    Array<
      PickArray<UserLearningTermGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UserLearningTermGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UserLearningTermGroupByOutputType[P]> 
            : GetScalarType<T[P], UserLearningTermGroupByOutputType[P]>
        }
      > 
    >


  export type UserLearningTermSelect = {
    id?: boolean
    user?: boolean | UserArgs
    term?: boolean | TermArgs
    userId?: boolean
    termId?: boolean
    remained?: boolean
    learned?: boolean
  }

  export type UserLearningTermInclude = {
    user?: boolean | UserArgs
    term?: boolean | TermArgs
  }

  export type UserLearningTermGetPayload<
    S extends boolean | null | undefined | UserLearningTermArgs,
    U = keyof S
      > = S extends true
        ? UserLearningTerm
    : S extends undefined
    ? never
    : S extends UserLearningTermArgs | UserLearningTermFindManyArgs
    ?'include' extends U
    ? UserLearningTerm  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> :
        P extends 'term'
        ? TermGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UserLearningTerm ?UserLearningTerm [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> :
        P extends 'term'
        ? TermGetPayload<S['select'][P]> : never
  } 
    : UserLearningTerm
  : UserLearningTerm


  type UserLearningTermCountArgs = Merge<
    Omit<UserLearningTermFindManyArgs, 'select' | 'include'> & {
      select?: UserLearningTermCountAggregateInputType | true
    }
  >

  export interface UserLearningTermDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one UserLearningTerm that matches the filter.
     * @param {UserLearningTermFindUniqueArgs} args - Arguments to find a UserLearningTerm
     * @example
     * // Get one UserLearningTerm
     * const userLearningTerm = await prisma.userLearningTerm.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserLearningTermFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserLearningTermFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserLearningTerm'> extends True ? CheckSelect<T, Prisma__UserLearningTermClient<UserLearningTerm>, Prisma__UserLearningTermClient<UserLearningTermGetPayload<T>>> : CheckSelect<T, Prisma__UserLearningTermClient<UserLearningTerm | null >, Prisma__UserLearningTermClient<UserLearningTermGetPayload<T> | null >>

    /**
     * Find the first UserLearningTerm that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLearningTermFindFirstArgs} args - Arguments to find a UserLearningTerm
     * @example
     * // Get one UserLearningTerm
     * const userLearningTerm = await prisma.userLearningTerm.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserLearningTermFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserLearningTermFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserLearningTerm'> extends True ? CheckSelect<T, Prisma__UserLearningTermClient<UserLearningTerm>, Prisma__UserLearningTermClient<UserLearningTermGetPayload<T>>> : CheckSelect<T, Prisma__UserLearningTermClient<UserLearningTerm | null >, Prisma__UserLearningTermClient<UserLearningTermGetPayload<T> | null >>

    /**
     * Find zero or more UserLearningTerms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLearningTermFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserLearningTerms
     * const userLearningTerms = await prisma.userLearningTerm.findMany()
     * 
     * // Get first 10 UserLearningTerms
     * const userLearningTerms = await prisma.userLearningTerm.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userLearningTermWithIdOnly = await prisma.userLearningTerm.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserLearningTermFindManyArgs>(
      args?: SelectSubset<T, UserLearningTermFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserLearningTerm>>, PrismaPromise<Array<UserLearningTermGetPayload<T>>>>

    /**
     * Create a UserLearningTerm.
     * @param {UserLearningTermCreateArgs} args - Arguments to create a UserLearningTerm.
     * @example
     * // Create one UserLearningTerm
     * const UserLearningTerm = await prisma.userLearningTerm.create({
     *   data: {
     *     // ... data to create a UserLearningTerm
     *   }
     * })
     * 
    **/
    create<T extends UserLearningTermCreateArgs>(
      args: SelectSubset<T, UserLearningTermCreateArgs>
    ): CheckSelect<T, Prisma__UserLearningTermClient<UserLearningTerm>, Prisma__UserLearningTermClient<UserLearningTermGetPayload<T>>>

    /**
     * Create many UserLearningTerms.
     *     @param {UserLearningTermCreateManyArgs} args - Arguments to create many UserLearningTerms.
     *     @example
     *     // Create many UserLearningTerms
     *     const userLearningTerm = await prisma.userLearningTerm.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserLearningTermCreateManyArgs>(
      args?: SelectSubset<T, UserLearningTermCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserLearningTerm.
     * @param {UserLearningTermDeleteArgs} args - Arguments to delete one UserLearningTerm.
     * @example
     * // Delete one UserLearningTerm
     * const UserLearningTerm = await prisma.userLearningTerm.delete({
     *   where: {
     *     // ... filter to delete one UserLearningTerm
     *   }
     * })
     * 
    **/
    delete<T extends UserLearningTermDeleteArgs>(
      args: SelectSubset<T, UserLearningTermDeleteArgs>
    ): CheckSelect<T, Prisma__UserLearningTermClient<UserLearningTerm>, Prisma__UserLearningTermClient<UserLearningTermGetPayload<T>>>

    /**
     * Update one UserLearningTerm.
     * @param {UserLearningTermUpdateArgs} args - Arguments to update one UserLearningTerm.
     * @example
     * // Update one UserLearningTerm
     * const userLearningTerm = await prisma.userLearningTerm.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserLearningTermUpdateArgs>(
      args: SelectSubset<T, UserLearningTermUpdateArgs>
    ): CheckSelect<T, Prisma__UserLearningTermClient<UserLearningTerm>, Prisma__UserLearningTermClient<UserLearningTermGetPayload<T>>>

    /**
     * Delete zero or more UserLearningTerms.
     * @param {UserLearningTermDeleteManyArgs} args - Arguments to filter UserLearningTerms to delete.
     * @example
     * // Delete a few UserLearningTerms
     * const { count } = await prisma.userLearningTerm.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserLearningTermDeleteManyArgs>(
      args?: SelectSubset<T, UserLearningTermDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserLearningTerms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLearningTermUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserLearningTerms
     * const userLearningTerm = await prisma.userLearningTerm.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserLearningTermUpdateManyArgs>(
      args: SelectSubset<T, UserLearningTermUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserLearningTerm.
     * @param {UserLearningTermUpsertArgs} args - Arguments to update or create a UserLearningTerm.
     * @example
     * // Update or create a UserLearningTerm
     * const userLearningTerm = await prisma.userLearningTerm.upsert({
     *   create: {
     *     // ... data to create a UserLearningTerm
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserLearningTerm we want to update
     *   }
     * })
    **/
    upsert<T extends UserLearningTermUpsertArgs>(
      args: SelectSubset<T, UserLearningTermUpsertArgs>
    ): CheckSelect<T, Prisma__UserLearningTermClient<UserLearningTerm>, Prisma__UserLearningTermClient<UserLearningTermGetPayload<T>>>

    /**
     * Count the number of UserLearningTerms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLearningTermCountArgs} args - Arguments to filter UserLearningTerms to count.
     * @example
     * // Count the number of UserLearningTerms
     * const count = await prisma.userLearningTerm.count({
     *   where: {
     *     // ... the filter for the UserLearningTerms we want to count
     *   }
     * })
    **/
    count<T extends UserLearningTermCountArgs>(
      args?: Subset<T, UserLearningTermCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserLearningTermCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserLearningTerm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLearningTermAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserLearningTermAggregateArgs>(args: Subset<T, UserLearningTermAggregateArgs>): PrismaPromise<GetUserLearningTermAggregateType<T>>

    /**
     * Group by UserLearningTerm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLearningTermGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserLearningTermGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserLearningTermGroupByArgs['orderBy'] }
        : { orderBy?: UserLearningTermGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserLearningTermGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserLearningTermGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserLearningTerm.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserLearningTermClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    term<T extends TermArgs = {}>(args?: Subset<T, TermArgs>): CheckSelect<T, Prisma__TermClient<Term | null >, Prisma__TermClient<TermGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * UserLearningTerm findUnique
   */
  export type UserLearningTermFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the UserLearningTerm
     * 
    **/
    select?: UserLearningTermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserLearningTermInclude | null
    /**
     * Throw an Error if a UserLearningTerm can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserLearningTerm to fetch.
     * 
    **/
    where: UserLearningTermWhereUniqueInput
  }


  /**
   * UserLearningTerm findFirst
   */
  export type UserLearningTermFindFirstArgs = {
    /**
     * Select specific fields to fetch from the UserLearningTerm
     * 
    **/
    select?: UserLearningTermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserLearningTermInclude | null
    /**
     * Throw an Error if a UserLearningTerm can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which UserLearningTerm to fetch.
     * 
    **/
    where?: UserLearningTermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLearningTerms to fetch.
     * 
    **/
    orderBy?: Enumerable<UserLearningTermOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLearningTerms.
     * 
    **/
    cursor?: UserLearningTermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLearningTerms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLearningTerms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLearningTerms.
     * 
    **/
    distinct?: Enumerable<UserLearningTermScalarFieldEnum>
  }


  /**
   * UserLearningTerm findMany
   */
  export type UserLearningTermFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserLearningTerm
     * 
    **/
    select?: UserLearningTermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserLearningTermInclude | null
    /**
     * Filter, which UserLearningTerms to fetch.
     * 
    **/
    where?: UserLearningTermWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLearningTerms to fetch.
     * 
    **/
    orderBy?: Enumerable<UserLearningTermOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserLearningTerms.
     * 
    **/
    cursor?: UserLearningTermWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLearningTerms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLearningTerms.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserLearningTermScalarFieldEnum>
  }


  /**
   * UserLearningTerm create
   */
  export type UserLearningTermCreateArgs = {
    /**
     * Select specific fields to fetch from the UserLearningTerm
     * 
    **/
    select?: UserLearningTermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserLearningTermInclude | null
    /**
     * The data needed to create a UserLearningTerm.
     * 
    **/
    data: XOR<UserLearningTermCreateInput, UserLearningTermUncheckedCreateInput>
  }


  /**
   * UserLearningTerm createMany
   */
  export type UserLearningTermCreateManyArgs = {
    data: Enumerable<UserLearningTermCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserLearningTerm update
   */
  export type UserLearningTermUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserLearningTerm
     * 
    **/
    select?: UserLearningTermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserLearningTermInclude | null
    /**
     * The data needed to update a UserLearningTerm.
     * 
    **/
    data: XOR<UserLearningTermUpdateInput, UserLearningTermUncheckedUpdateInput>
    /**
     * Choose, which UserLearningTerm to update.
     * 
    **/
    where: UserLearningTermWhereUniqueInput
  }


  /**
   * UserLearningTerm updateMany
   */
  export type UserLearningTermUpdateManyArgs = {
    data: XOR<UserLearningTermUpdateManyMutationInput, UserLearningTermUncheckedUpdateManyInput>
    where?: UserLearningTermWhereInput
  }


  /**
   * UserLearningTerm upsert
   */
  export type UserLearningTermUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserLearningTerm
     * 
    **/
    select?: UserLearningTermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserLearningTermInclude | null
    /**
     * The filter to search for the UserLearningTerm to update in case it exists.
     * 
    **/
    where: UserLearningTermWhereUniqueInput
    /**
     * In case the UserLearningTerm found by the `where` argument doesn't exist, create a new UserLearningTerm with this data.
     * 
    **/
    create: XOR<UserLearningTermCreateInput, UserLearningTermUncheckedCreateInput>
    /**
     * In case the UserLearningTerm was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserLearningTermUpdateInput, UserLearningTermUncheckedUpdateInput>
  }


  /**
   * UserLearningTerm delete
   */
  export type UserLearningTermDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserLearningTerm
     * 
    **/
    select?: UserLearningTermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserLearningTermInclude | null
    /**
     * Filter which UserLearningTerm to delete.
     * 
    **/
    where: UserLearningTermWhereUniqueInput
  }


  /**
   * UserLearningTerm deleteMany
   */
  export type UserLearningTermDeleteManyArgs = {
    where?: UserLearningTermWhereInput
  }


  /**
   * UserLearningTerm without action
   */
  export type UserLearningTermArgs = {
    /**
     * Select specific fields to fetch from the UserLearningTerm
     * 
    **/
    select?: UserLearningTermSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserLearningTermInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const SetScalarFieldEnum: {
    id: 'id',
    name: 'name',
    authorId: 'authorId'
  };

  export type SetScalarFieldEnum = (typeof SetScalarFieldEnum)[keyof typeof SetScalarFieldEnum]


  export const TermScalarFieldEnum: {
    id: 'id',
    question: 'question',
    answer: 'answer',
    explanation: 'explanation',
    setId: 'setId'
  };

  export type TermScalarFieldEnum = (typeof TermScalarFieldEnum)[keyof typeof TermScalarFieldEnum]


  export const OptionScalarFieldEnum: {
    id: 'id',
    option: 'option',
    termId: 'termId'
  };

  export type OptionScalarFieldEnum = (typeof OptionScalarFieldEnum)[keyof typeof OptionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserLearningTermScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    termId: 'termId',
    remained: 'remained',
    learned: 'learned'
  };

  export type UserLearningTermScalarFieldEnum = (typeof UserLearningTermScalarFieldEnum)[keyof typeof UserLearningTermScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type SetWhereInput = {
    AND?: Enumerable<SetWhereInput>
    OR?: Enumerable<SetWhereInput>
    NOT?: Enumerable<SetWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    authorId?: IntFilter | number
    terms?: TermListRelationFilter
  }

  export type SetOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    authorId?: SortOrder
  }

  export type SetWhereUniqueInput = {
    id?: number
  }

  export type SetScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SetScalarWhereWithAggregatesInput>
    OR?: Enumerable<SetScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SetScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    authorId?: IntWithAggregatesFilter | number
  }

  export type TermWhereInput = {
    AND?: Enumerable<TermWhereInput>
    OR?: Enumerable<TermWhereInput>
    NOT?: Enumerable<TermWhereInput>
    id?: IntFilter | number
    question?: StringFilter | string
    answer?: StringFilter | string
    explanation?: StringNullableFilter | string | null
    set?: XOR<SetRelationFilter, SetWhereInput>
    setId?: IntFilter | number
    options?: OptionListRelationFilter
    usersLearning?: UserLearningTermListRelationFilter
  }

  export type TermOrderByInput = {
    id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    explanation?: SortOrder
    setId?: SortOrder
  }

  export type TermWhereUniqueInput = {
    id?: number
  }

  export type TermScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TermScalarWhereWithAggregatesInput>
    OR?: Enumerable<TermScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TermScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    question?: StringWithAggregatesFilter | string
    answer?: StringWithAggregatesFilter | string
    explanation?: StringNullableWithAggregatesFilter | string | null
    setId?: IntWithAggregatesFilter | number
  }

  export type OptionWhereInput = {
    AND?: Enumerable<OptionWhereInput>
    OR?: Enumerable<OptionWhereInput>
    NOT?: Enumerable<OptionWhereInput>
    id?: IntFilter | number
    option?: StringFilter | string
    term?: XOR<TermRelationFilter, TermWhereInput>
    termId?: IntFilter | number
  }

  export type OptionOrderByInput = {
    id?: SortOrder
    option?: SortOrder
    termId?: SortOrder
  }

  export type OptionWhereUniqueInput = {
    id?: number
  }

  export type OptionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OptionScalarWhereWithAggregatesInput>
    OR?: Enumerable<OptionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OptionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    option?: StringWithAggregatesFilter | string
    termId?: IntWithAggregatesFilter | number
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    password?: StringFilter | string
    sets?: SetListRelationFilter
    learningTerms?: UserLearningTermListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    username?: string
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type UserLearningTermWhereInput = {
    AND?: Enumerable<UserLearningTermWhereInput>
    OR?: Enumerable<UserLearningTermWhereInput>
    NOT?: Enumerable<UserLearningTermWhereInput>
    id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    term?: XOR<TermRelationFilter, TermWhereInput>
    userId?: IntFilter | number
    termId?: IntFilter | number
    remained?: IntFilter | number
    learned?: BoolFilter | boolean
  }

  export type UserLearningTermOrderByInput = {
    id?: SortOrder
    userId?: SortOrder
    termId?: SortOrder
    remained?: SortOrder
    learned?: SortOrder
  }

  export type UserLearningTermWhereUniqueInput = {
    id?: number
  }

  export type UserLearningTermScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserLearningTermScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserLearningTermScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserLearningTermScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    termId?: IntWithAggregatesFilter | number
    remained?: IntWithAggregatesFilter | number
    learned?: BoolWithAggregatesFilter | boolean
  }

  export type SetCreateInput = {
    name: string
    author: UserCreateNestedOneWithoutSetsInput
    terms?: TermCreateNestedManyWithoutSetInput
  }

  export type SetUncheckedCreateInput = {
    id?: number
    name: string
    authorId: number
    terms?: TermUncheckedCreateNestedManyWithoutSetInput
  }

  export type SetUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    author?: UserUpdateOneRequiredWithoutSetsInput
    terms?: TermUpdateManyWithoutSetInput
  }

  export type SetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    authorId?: IntFieldUpdateOperationsInput | number
    terms?: TermUncheckedUpdateManyWithoutSetInput
  }

  export type SetCreateManyInput = {
    id?: number
    name: string
    authorId: number
  }

  export type SetUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    authorId?: IntFieldUpdateOperationsInput | number
  }

  export type TermCreateInput = {
    question: string
    answer: string
    explanation?: string | null
    set: SetCreateNestedOneWithoutTermsInput
    options?: OptionCreateNestedManyWithoutTermInput
    usersLearning?: UserLearningTermCreateNestedManyWithoutTermInput
  }

  export type TermUncheckedCreateInput = {
    id?: number
    question: string
    answer: string
    explanation?: string | null
    setId: number
    options?: OptionUncheckedCreateNestedManyWithoutTermInput
    usersLearning?: UserLearningTermUncheckedCreateNestedManyWithoutTermInput
  }

  export type TermUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    set?: SetUpdateOneRequiredWithoutTermsInput
    options?: OptionUpdateManyWithoutTermInput
    usersLearning?: UserLearningTermUpdateManyWithoutTermInput
  }

  export type TermUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    setId?: IntFieldUpdateOperationsInput | number
    options?: OptionUncheckedUpdateManyWithoutTermInput
    usersLearning?: UserLearningTermUncheckedUpdateManyWithoutTermInput
  }

  export type TermCreateManyInput = {
    id?: number
    question: string
    answer: string
    explanation?: string | null
    setId: number
  }

  export type TermUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TermUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    setId?: IntFieldUpdateOperationsInput | number
  }

  export type OptionCreateInput = {
    option: string
    term: TermCreateNestedOneWithoutOptionsInput
  }

  export type OptionUncheckedCreateInput = {
    id?: number
    option: string
    termId: number
  }

  export type OptionUpdateInput = {
    option?: StringFieldUpdateOperationsInput | string
    term?: TermUpdateOneRequiredWithoutOptionsInput
  }

  export type OptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    option?: StringFieldUpdateOperationsInput | string
    termId?: IntFieldUpdateOperationsInput | number
  }

  export type OptionCreateManyInput = {
    id?: number
    option: string
    termId: number
  }

  export type OptionUpdateManyMutationInput = {
    option?: StringFieldUpdateOperationsInput | string
  }

  export type OptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    option?: StringFieldUpdateOperationsInput | string
    termId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    username: string
    password: string
    sets?: SetCreateNestedManyWithoutAuthorInput
    learningTerms?: UserLearningTermCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    sets?: SetUncheckedCreateNestedManyWithoutAuthorInput
    learningTerms?: UserLearningTermUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sets?: SetUpdateManyWithoutAuthorInput
    learningTerms?: UserLearningTermUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sets?: SetUncheckedUpdateManyWithoutAuthorInput
    learningTerms?: UserLearningTermUncheckedUpdateManyWithoutUserInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserLearningTermCreateInput = {
    remained: number
    learned: boolean
    user: UserCreateNestedOneWithoutLearningTermsInput
    term: TermCreateNestedOneWithoutUsersLearningInput
  }

  export type UserLearningTermUncheckedCreateInput = {
    id?: number
    userId: number
    termId: number
    remained: number
    learned: boolean
  }

  export type UserLearningTermUpdateInput = {
    remained?: IntFieldUpdateOperationsInput | number
    learned?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutLearningTermsInput
    term?: TermUpdateOneRequiredWithoutUsersLearningInput
  }

  export type UserLearningTermUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    termId?: IntFieldUpdateOperationsInput | number
    remained?: IntFieldUpdateOperationsInput | number
    learned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserLearningTermCreateManyInput = {
    id?: number
    userId: number
    termId: number
    remained: number
    learned: boolean
  }

  export type UserLearningTermUpdateManyMutationInput = {
    remained?: IntFieldUpdateOperationsInput | number
    learned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserLearningTermUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    termId?: IntFieldUpdateOperationsInput | number
    remained?: IntFieldUpdateOperationsInput | number
    learned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TermListRelationFilter = {
    every?: TermWhereInput
    some?: TermWhereInput
    none?: TermWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type SetRelationFilter = {
    is?: SetWhereInput
    isNot?: SetWhereInput
  }

  export type OptionListRelationFilter = {
    every?: OptionWhereInput
    some?: OptionWhereInput
    none?: OptionWhereInput
  }

  export type UserLearningTermListRelationFilter = {
    every?: UserLearningTermWhereInput
    some?: UserLearningTermWhereInput
    none?: UserLearningTermWhereInput
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type TermRelationFilter = {
    is?: TermWhereInput
    isNot?: TermWhereInput
  }

  export type SetListRelationFilter = {
    every?: SetWhereInput
    some?: SetWhereInput
    none?: SetWhereInput
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolFilter
    _max?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolFilter
  }

  export type UserCreateNestedOneWithoutSetsInput = {
    create?: XOR<UserCreateWithoutSetsInput, UserUncheckedCreateWithoutSetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSetsInput
    connect?: UserWhereUniqueInput
  }

  export type TermCreateNestedManyWithoutSetInput = {
    create?: XOR<Enumerable<TermCreateWithoutSetInput>, Enumerable<TermUncheckedCreateWithoutSetInput>>
    connectOrCreate?: Enumerable<TermCreateOrConnectWithoutSetInput>
    createMany?: TermCreateManySetInputEnvelope
    connect?: Enumerable<TermWhereUniqueInput>
  }

  export type TermUncheckedCreateNestedManyWithoutSetInput = {
    create?: XOR<Enumerable<TermCreateWithoutSetInput>, Enumerable<TermUncheckedCreateWithoutSetInput>>
    connectOrCreate?: Enumerable<TermCreateOrConnectWithoutSetInput>
    createMany?: TermCreateManySetInputEnvelope
    connect?: Enumerable<TermWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateOneRequiredWithoutSetsInput = {
    create?: XOR<UserCreateWithoutSetsInput, UserUncheckedCreateWithoutSetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSetsInput
    upsert?: UserUpsertWithoutSetsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSetsInput, UserUncheckedUpdateWithoutSetsInput>
  }

  export type TermUpdateManyWithoutSetInput = {
    create?: XOR<Enumerable<TermCreateWithoutSetInput>, Enumerable<TermUncheckedCreateWithoutSetInput>>
    connectOrCreate?: Enumerable<TermCreateOrConnectWithoutSetInput>
    upsert?: Enumerable<TermUpsertWithWhereUniqueWithoutSetInput>
    createMany?: TermCreateManySetInputEnvelope
    connect?: Enumerable<TermWhereUniqueInput>
    set?: Enumerable<TermWhereUniqueInput>
    disconnect?: Enumerable<TermWhereUniqueInput>
    delete?: Enumerable<TermWhereUniqueInput>
    update?: Enumerable<TermUpdateWithWhereUniqueWithoutSetInput>
    updateMany?: Enumerable<TermUpdateManyWithWhereWithoutSetInput>
    deleteMany?: Enumerable<TermScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TermUncheckedUpdateManyWithoutSetInput = {
    create?: XOR<Enumerable<TermCreateWithoutSetInput>, Enumerable<TermUncheckedCreateWithoutSetInput>>
    connectOrCreate?: Enumerable<TermCreateOrConnectWithoutSetInput>
    upsert?: Enumerable<TermUpsertWithWhereUniqueWithoutSetInput>
    createMany?: TermCreateManySetInputEnvelope
    connect?: Enumerable<TermWhereUniqueInput>
    set?: Enumerable<TermWhereUniqueInput>
    disconnect?: Enumerable<TermWhereUniqueInput>
    delete?: Enumerable<TermWhereUniqueInput>
    update?: Enumerable<TermUpdateWithWhereUniqueWithoutSetInput>
    updateMany?: Enumerable<TermUpdateManyWithWhereWithoutSetInput>
    deleteMany?: Enumerable<TermScalarWhereInput>
  }

  export type SetCreateNestedOneWithoutTermsInput = {
    create?: XOR<SetCreateWithoutTermsInput, SetUncheckedCreateWithoutTermsInput>
    connectOrCreate?: SetCreateOrConnectWithoutTermsInput
    connect?: SetWhereUniqueInput
  }

  export type OptionCreateNestedManyWithoutTermInput = {
    create?: XOR<Enumerable<OptionCreateWithoutTermInput>, Enumerable<OptionUncheckedCreateWithoutTermInput>>
    connectOrCreate?: Enumerable<OptionCreateOrConnectWithoutTermInput>
    createMany?: OptionCreateManyTermInputEnvelope
    connect?: Enumerable<OptionWhereUniqueInput>
  }

  export type UserLearningTermCreateNestedManyWithoutTermInput = {
    create?: XOR<Enumerable<UserLearningTermCreateWithoutTermInput>, Enumerable<UserLearningTermUncheckedCreateWithoutTermInput>>
    connectOrCreate?: Enumerable<UserLearningTermCreateOrConnectWithoutTermInput>
    createMany?: UserLearningTermCreateManyTermInputEnvelope
    connect?: Enumerable<UserLearningTermWhereUniqueInput>
  }

  export type OptionUncheckedCreateNestedManyWithoutTermInput = {
    create?: XOR<Enumerable<OptionCreateWithoutTermInput>, Enumerable<OptionUncheckedCreateWithoutTermInput>>
    connectOrCreate?: Enumerable<OptionCreateOrConnectWithoutTermInput>
    createMany?: OptionCreateManyTermInputEnvelope
    connect?: Enumerable<OptionWhereUniqueInput>
  }

  export type UserLearningTermUncheckedCreateNestedManyWithoutTermInput = {
    create?: XOR<Enumerable<UserLearningTermCreateWithoutTermInput>, Enumerable<UserLearningTermUncheckedCreateWithoutTermInput>>
    connectOrCreate?: Enumerable<UserLearningTermCreateOrConnectWithoutTermInput>
    createMany?: UserLearningTermCreateManyTermInputEnvelope
    connect?: Enumerable<UserLearningTermWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type SetUpdateOneRequiredWithoutTermsInput = {
    create?: XOR<SetCreateWithoutTermsInput, SetUncheckedCreateWithoutTermsInput>
    connectOrCreate?: SetCreateOrConnectWithoutTermsInput
    upsert?: SetUpsertWithoutTermsInput
    connect?: SetWhereUniqueInput
    update?: XOR<SetUpdateWithoutTermsInput, SetUncheckedUpdateWithoutTermsInput>
  }

  export type OptionUpdateManyWithoutTermInput = {
    create?: XOR<Enumerable<OptionCreateWithoutTermInput>, Enumerable<OptionUncheckedCreateWithoutTermInput>>
    connectOrCreate?: Enumerable<OptionCreateOrConnectWithoutTermInput>
    upsert?: Enumerable<OptionUpsertWithWhereUniqueWithoutTermInput>
    createMany?: OptionCreateManyTermInputEnvelope
    connect?: Enumerable<OptionWhereUniqueInput>
    set?: Enumerable<OptionWhereUniqueInput>
    disconnect?: Enumerable<OptionWhereUniqueInput>
    delete?: Enumerable<OptionWhereUniqueInput>
    update?: Enumerable<OptionUpdateWithWhereUniqueWithoutTermInput>
    updateMany?: Enumerable<OptionUpdateManyWithWhereWithoutTermInput>
    deleteMany?: Enumerable<OptionScalarWhereInput>
  }

  export type UserLearningTermUpdateManyWithoutTermInput = {
    create?: XOR<Enumerable<UserLearningTermCreateWithoutTermInput>, Enumerable<UserLearningTermUncheckedCreateWithoutTermInput>>
    connectOrCreate?: Enumerable<UserLearningTermCreateOrConnectWithoutTermInput>
    upsert?: Enumerable<UserLearningTermUpsertWithWhereUniqueWithoutTermInput>
    createMany?: UserLearningTermCreateManyTermInputEnvelope
    connect?: Enumerable<UserLearningTermWhereUniqueInput>
    set?: Enumerable<UserLearningTermWhereUniqueInput>
    disconnect?: Enumerable<UserLearningTermWhereUniqueInput>
    delete?: Enumerable<UserLearningTermWhereUniqueInput>
    update?: Enumerable<UserLearningTermUpdateWithWhereUniqueWithoutTermInput>
    updateMany?: Enumerable<UserLearningTermUpdateManyWithWhereWithoutTermInput>
    deleteMany?: Enumerable<UserLearningTermScalarWhereInput>
  }

  export type OptionUncheckedUpdateManyWithoutTermInput = {
    create?: XOR<Enumerable<OptionCreateWithoutTermInput>, Enumerable<OptionUncheckedCreateWithoutTermInput>>
    connectOrCreate?: Enumerable<OptionCreateOrConnectWithoutTermInput>
    upsert?: Enumerable<OptionUpsertWithWhereUniqueWithoutTermInput>
    createMany?: OptionCreateManyTermInputEnvelope
    connect?: Enumerable<OptionWhereUniqueInput>
    set?: Enumerable<OptionWhereUniqueInput>
    disconnect?: Enumerable<OptionWhereUniqueInput>
    delete?: Enumerable<OptionWhereUniqueInput>
    update?: Enumerable<OptionUpdateWithWhereUniqueWithoutTermInput>
    updateMany?: Enumerable<OptionUpdateManyWithWhereWithoutTermInput>
    deleteMany?: Enumerable<OptionScalarWhereInput>
  }

  export type UserLearningTermUncheckedUpdateManyWithoutTermInput = {
    create?: XOR<Enumerable<UserLearningTermCreateWithoutTermInput>, Enumerable<UserLearningTermUncheckedCreateWithoutTermInput>>
    connectOrCreate?: Enumerable<UserLearningTermCreateOrConnectWithoutTermInput>
    upsert?: Enumerable<UserLearningTermUpsertWithWhereUniqueWithoutTermInput>
    createMany?: UserLearningTermCreateManyTermInputEnvelope
    connect?: Enumerable<UserLearningTermWhereUniqueInput>
    set?: Enumerable<UserLearningTermWhereUniqueInput>
    disconnect?: Enumerable<UserLearningTermWhereUniqueInput>
    delete?: Enumerable<UserLearningTermWhereUniqueInput>
    update?: Enumerable<UserLearningTermUpdateWithWhereUniqueWithoutTermInput>
    updateMany?: Enumerable<UserLearningTermUpdateManyWithWhereWithoutTermInput>
    deleteMany?: Enumerable<UserLearningTermScalarWhereInput>
  }

  export type TermCreateNestedOneWithoutOptionsInput = {
    create?: XOR<TermCreateWithoutOptionsInput, TermUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: TermCreateOrConnectWithoutOptionsInput
    connect?: TermWhereUniqueInput
  }

  export type TermUpdateOneRequiredWithoutOptionsInput = {
    create?: XOR<TermCreateWithoutOptionsInput, TermUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: TermCreateOrConnectWithoutOptionsInput
    upsert?: TermUpsertWithoutOptionsInput
    connect?: TermWhereUniqueInput
    update?: XOR<TermUpdateWithoutOptionsInput, TermUncheckedUpdateWithoutOptionsInput>
  }

  export type SetCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<SetCreateWithoutAuthorInput>, Enumerable<SetUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<SetCreateOrConnectWithoutAuthorInput>
    createMany?: SetCreateManyAuthorInputEnvelope
    connect?: Enumerable<SetWhereUniqueInput>
  }

  export type UserLearningTermCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserLearningTermCreateWithoutUserInput>, Enumerable<UserLearningTermUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserLearningTermCreateOrConnectWithoutUserInput>
    createMany?: UserLearningTermCreateManyUserInputEnvelope
    connect?: Enumerable<UserLearningTermWhereUniqueInput>
  }

  export type SetUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<SetCreateWithoutAuthorInput>, Enumerable<SetUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<SetCreateOrConnectWithoutAuthorInput>
    createMany?: SetCreateManyAuthorInputEnvelope
    connect?: Enumerable<SetWhereUniqueInput>
  }

  export type UserLearningTermUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<UserLearningTermCreateWithoutUserInput>, Enumerable<UserLearningTermUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserLearningTermCreateOrConnectWithoutUserInput>
    createMany?: UserLearningTermCreateManyUserInputEnvelope
    connect?: Enumerable<UserLearningTermWhereUniqueInput>
  }

  export type SetUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<SetCreateWithoutAuthorInput>, Enumerable<SetUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<SetCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<SetUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: SetCreateManyAuthorInputEnvelope
    connect?: Enumerable<SetWhereUniqueInput>
    set?: Enumerable<SetWhereUniqueInput>
    disconnect?: Enumerable<SetWhereUniqueInput>
    delete?: Enumerable<SetWhereUniqueInput>
    update?: Enumerable<SetUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<SetUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<SetScalarWhereInput>
  }

  export type UserLearningTermUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UserLearningTermCreateWithoutUserInput>, Enumerable<UserLearningTermUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserLearningTermCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserLearningTermUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserLearningTermCreateManyUserInputEnvelope
    connect?: Enumerable<UserLearningTermWhereUniqueInput>
    set?: Enumerable<UserLearningTermWhereUniqueInput>
    disconnect?: Enumerable<UserLearningTermWhereUniqueInput>
    delete?: Enumerable<UserLearningTermWhereUniqueInput>
    update?: Enumerable<UserLearningTermUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserLearningTermUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserLearningTermScalarWhereInput>
  }

  export type SetUncheckedUpdateManyWithoutAuthorInput = {
    create?: XOR<Enumerable<SetCreateWithoutAuthorInput>, Enumerable<SetUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<SetCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<SetUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: SetCreateManyAuthorInputEnvelope
    connect?: Enumerable<SetWhereUniqueInput>
    set?: Enumerable<SetWhereUniqueInput>
    disconnect?: Enumerable<SetWhereUniqueInput>
    delete?: Enumerable<SetWhereUniqueInput>
    update?: Enumerable<SetUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<SetUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<SetScalarWhereInput>
  }

  export type UserLearningTermUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<UserLearningTermCreateWithoutUserInput>, Enumerable<UserLearningTermUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<UserLearningTermCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<UserLearningTermUpsertWithWhereUniqueWithoutUserInput>
    createMany?: UserLearningTermCreateManyUserInputEnvelope
    connect?: Enumerable<UserLearningTermWhereUniqueInput>
    set?: Enumerable<UserLearningTermWhereUniqueInput>
    disconnect?: Enumerable<UserLearningTermWhereUniqueInput>
    delete?: Enumerable<UserLearningTermWhereUniqueInput>
    update?: Enumerable<UserLearningTermUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<UserLearningTermUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<UserLearningTermScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutLearningTermsInput = {
    create?: XOR<UserCreateWithoutLearningTermsInput, UserUncheckedCreateWithoutLearningTermsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLearningTermsInput
    connect?: UserWhereUniqueInput
  }

  export type TermCreateNestedOneWithoutUsersLearningInput = {
    create?: XOR<TermCreateWithoutUsersLearningInput, TermUncheckedCreateWithoutUsersLearningInput>
    connectOrCreate?: TermCreateOrConnectWithoutUsersLearningInput
    connect?: TermWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutLearningTermsInput = {
    create?: XOR<UserCreateWithoutLearningTermsInput, UserUncheckedCreateWithoutLearningTermsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLearningTermsInput
    upsert?: UserUpsertWithoutLearningTermsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutLearningTermsInput, UserUncheckedUpdateWithoutLearningTermsInput>
  }

  export type TermUpdateOneRequiredWithoutUsersLearningInput = {
    create?: XOR<TermCreateWithoutUsersLearningInput, TermUncheckedCreateWithoutUsersLearningInput>
    connectOrCreate?: TermCreateOrConnectWithoutUsersLearningInput
    upsert?: TermUpsertWithoutUsersLearningInput
    connect?: TermWhereUniqueInput
    update?: XOR<TermUpdateWithoutUsersLearningInput, TermUncheckedUpdateWithoutUsersLearningInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolFilter
    _max?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolFilter
  }

  export type UserCreateWithoutSetsInput = {
    username: string
    password: string
    learningTerms?: UserLearningTermCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSetsInput = {
    id?: number
    username: string
    password: string
    learningTerms?: UserLearningTermUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSetsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSetsInput, UserUncheckedCreateWithoutSetsInput>
  }

  export type TermCreateWithoutSetInput = {
    question: string
    answer: string
    explanation?: string | null
    options?: OptionCreateNestedManyWithoutTermInput
    usersLearning?: UserLearningTermCreateNestedManyWithoutTermInput
  }

  export type TermUncheckedCreateWithoutSetInput = {
    id?: number
    question: string
    answer: string
    explanation?: string | null
    options?: OptionUncheckedCreateNestedManyWithoutTermInput
    usersLearning?: UserLearningTermUncheckedCreateNestedManyWithoutTermInput
  }

  export type TermCreateOrConnectWithoutSetInput = {
    where: TermWhereUniqueInput
    create: XOR<TermCreateWithoutSetInput, TermUncheckedCreateWithoutSetInput>
  }

  export type TermCreateManySetInputEnvelope = {
    data: Enumerable<TermCreateManySetInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSetsInput = {
    update: XOR<UserUpdateWithoutSetsInput, UserUncheckedUpdateWithoutSetsInput>
    create: XOR<UserCreateWithoutSetsInput, UserUncheckedCreateWithoutSetsInput>
  }

  export type UserUpdateWithoutSetsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    learningTerms?: UserLearningTermUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutSetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    learningTerms?: UserLearningTermUncheckedUpdateManyWithoutUserInput
  }

  export type TermUpsertWithWhereUniqueWithoutSetInput = {
    where: TermWhereUniqueInput
    update: XOR<TermUpdateWithoutSetInput, TermUncheckedUpdateWithoutSetInput>
    create: XOR<TermCreateWithoutSetInput, TermUncheckedCreateWithoutSetInput>
  }

  export type TermUpdateWithWhereUniqueWithoutSetInput = {
    where: TermWhereUniqueInput
    data: XOR<TermUpdateWithoutSetInput, TermUncheckedUpdateWithoutSetInput>
  }

  export type TermUpdateManyWithWhereWithoutSetInput = {
    where: TermScalarWhereInput
    data: XOR<TermUpdateManyMutationInput, TermUncheckedUpdateManyWithoutTermsInput>
  }

  export type TermScalarWhereInput = {
    AND?: Enumerable<TermScalarWhereInput>
    OR?: Enumerable<TermScalarWhereInput>
    NOT?: Enumerable<TermScalarWhereInput>
    id?: IntFilter | number
    question?: StringFilter | string
    answer?: StringFilter | string
    explanation?: StringNullableFilter | string | null
    setId?: IntFilter | number
  }

  export type SetCreateWithoutTermsInput = {
    name: string
    author: UserCreateNestedOneWithoutSetsInput
  }

  export type SetUncheckedCreateWithoutTermsInput = {
    id?: number
    name: string
    authorId: number
  }

  export type SetCreateOrConnectWithoutTermsInput = {
    where: SetWhereUniqueInput
    create: XOR<SetCreateWithoutTermsInput, SetUncheckedCreateWithoutTermsInput>
  }

  export type OptionCreateWithoutTermInput = {
    option: string
  }

  export type OptionUncheckedCreateWithoutTermInput = {
    id?: number
    option: string
  }

  export type OptionCreateOrConnectWithoutTermInput = {
    where: OptionWhereUniqueInput
    create: XOR<OptionCreateWithoutTermInput, OptionUncheckedCreateWithoutTermInput>
  }

  export type OptionCreateManyTermInputEnvelope = {
    data: Enumerable<OptionCreateManyTermInput>
    skipDuplicates?: boolean
  }

  export type UserLearningTermCreateWithoutTermInput = {
    remained: number
    learned: boolean
    user: UserCreateNestedOneWithoutLearningTermsInput
  }

  export type UserLearningTermUncheckedCreateWithoutTermInput = {
    id?: number
    userId: number
    remained: number
    learned: boolean
  }

  export type UserLearningTermCreateOrConnectWithoutTermInput = {
    where: UserLearningTermWhereUniqueInput
    create: XOR<UserLearningTermCreateWithoutTermInput, UserLearningTermUncheckedCreateWithoutTermInput>
  }

  export type UserLearningTermCreateManyTermInputEnvelope = {
    data: Enumerable<UserLearningTermCreateManyTermInput>
    skipDuplicates?: boolean
  }

  export type SetUpsertWithoutTermsInput = {
    update: XOR<SetUpdateWithoutTermsInput, SetUncheckedUpdateWithoutTermsInput>
    create: XOR<SetCreateWithoutTermsInput, SetUncheckedCreateWithoutTermsInput>
  }

  export type SetUpdateWithoutTermsInput = {
    name?: StringFieldUpdateOperationsInput | string
    author?: UserUpdateOneRequiredWithoutSetsInput
  }

  export type SetUncheckedUpdateWithoutTermsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    authorId?: IntFieldUpdateOperationsInput | number
  }

  export type OptionUpsertWithWhereUniqueWithoutTermInput = {
    where: OptionWhereUniqueInput
    update: XOR<OptionUpdateWithoutTermInput, OptionUncheckedUpdateWithoutTermInput>
    create: XOR<OptionCreateWithoutTermInput, OptionUncheckedCreateWithoutTermInput>
  }

  export type OptionUpdateWithWhereUniqueWithoutTermInput = {
    where: OptionWhereUniqueInput
    data: XOR<OptionUpdateWithoutTermInput, OptionUncheckedUpdateWithoutTermInput>
  }

  export type OptionUpdateManyWithWhereWithoutTermInput = {
    where: OptionScalarWhereInput
    data: XOR<OptionUpdateManyMutationInput, OptionUncheckedUpdateManyWithoutOptionsInput>
  }

  export type OptionScalarWhereInput = {
    AND?: Enumerable<OptionScalarWhereInput>
    OR?: Enumerable<OptionScalarWhereInput>
    NOT?: Enumerable<OptionScalarWhereInput>
    id?: IntFilter | number
    option?: StringFilter | string
    termId?: IntFilter | number
  }

  export type UserLearningTermUpsertWithWhereUniqueWithoutTermInput = {
    where: UserLearningTermWhereUniqueInput
    update: XOR<UserLearningTermUpdateWithoutTermInput, UserLearningTermUncheckedUpdateWithoutTermInput>
    create: XOR<UserLearningTermCreateWithoutTermInput, UserLearningTermUncheckedCreateWithoutTermInput>
  }

  export type UserLearningTermUpdateWithWhereUniqueWithoutTermInput = {
    where: UserLearningTermWhereUniqueInput
    data: XOR<UserLearningTermUpdateWithoutTermInput, UserLearningTermUncheckedUpdateWithoutTermInput>
  }

  export type UserLearningTermUpdateManyWithWhereWithoutTermInput = {
    where: UserLearningTermScalarWhereInput
    data: XOR<UserLearningTermUpdateManyMutationInput, UserLearningTermUncheckedUpdateManyWithoutUsersLearningInput>
  }

  export type UserLearningTermScalarWhereInput = {
    AND?: Enumerable<UserLearningTermScalarWhereInput>
    OR?: Enumerable<UserLearningTermScalarWhereInput>
    NOT?: Enumerable<UserLearningTermScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    termId?: IntFilter | number
    remained?: IntFilter | number
    learned?: BoolFilter | boolean
  }

  export type TermCreateWithoutOptionsInput = {
    question: string
    answer: string
    explanation?: string | null
    set: SetCreateNestedOneWithoutTermsInput
    usersLearning?: UserLearningTermCreateNestedManyWithoutTermInput
  }

  export type TermUncheckedCreateWithoutOptionsInput = {
    id?: number
    question: string
    answer: string
    explanation?: string | null
    setId: number
    usersLearning?: UserLearningTermUncheckedCreateNestedManyWithoutTermInput
  }

  export type TermCreateOrConnectWithoutOptionsInput = {
    where: TermWhereUniqueInput
    create: XOR<TermCreateWithoutOptionsInput, TermUncheckedCreateWithoutOptionsInput>
  }

  export type TermUpsertWithoutOptionsInput = {
    update: XOR<TermUpdateWithoutOptionsInput, TermUncheckedUpdateWithoutOptionsInput>
    create: XOR<TermCreateWithoutOptionsInput, TermUncheckedCreateWithoutOptionsInput>
  }

  export type TermUpdateWithoutOptionsInput = {
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    set?: SetUpdateOneRequiredWithoutTermsInput
    usersLearning?: UserLearningTermUpdateManyWithoutTermInput
  }

  export type TermUncheckedUpdateWithoutOptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    setId?: IntFieldUpdateOperationsInput | number
    usersLearning?: UserLearningTermUncheckedUpdateManyWithoutTermInput
  }

  export type SetCreateWithoutAuthorInput = {
    name: string
    terms?: TermCreateNestedManyWithoutSetInput
  }

  export type SetUncheckedCreateWithoutAuthorInput = {
    id?: number
    name: string
    terms?: TermUncheckedCreateNestedManyWithoutSetInput
  }

  export type SetCreateOrConnectWithoutAuthorInput = {
    where: SetWhereUniqueInput
    create: XOR<SetCreateWithoutAuthorInput, SetUncheckedCreateWithoutAuthorInput>
  }

  export type SetCreateManyAuthorInputEnvelope = {
    data: Enumerable<SetCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type UserLearningTermCreateWithoutUserInput = {
    remained: number
    learned: boolean
    term: TermCreateNestedOneWithoutUsersLearningInput
  }

  export type UserLearningTermUncheckedCreateWithoutUserInput = {
    id?: number
    termId: number
    remained: number
    learned: boolean
  }

  export type UserLearningTermCreateOrConnectWithoutUserInput = {
    where: UserLearningTermWhereUniqueInput
    create: XOR<UserLearningTermCreateWithoutUserInput, UserLearningTermUncheckedCreateWithoutUserInput>
  }

  export type UserLearningTermCreateManyUserInputEnvelope = {
    data: Enumerable<UserLearningTermCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SetUpsertWithWhereUniqueWithoutAuthorInput = {
    where: SetWhereUniqueInput
    update: XOR<SetUpdateWithoutAuthorInput, SetUncheckedUpdateWithoutAuthorInput>
    create: XOR<SetCreateWithoutAuthorInput, SetUncheckedCreateWithoutAuthorInput>
  }

  export type SetUpdateWithWhereUniqueWithoutAuthorInput = {
    where: SetWhereUniqueInput
    data: XOR<SetUpdateWithoutAuthorInput, SetUncheckedUpdateWithoutAuthorInput>
  }

  export type SetUpdateManyWithWhereWithoutAuthorInput = {
    where: SetScalarWhereInput
    data: XOR<SetUpdateManyMutationInput, SetUncheckedUpdateManyWithoutSetsInput>
  }

  export type SetScalarWhereInput = {
    AND?: Enumerable<SetScalarWhereInput>
    OR?: Enumerable<SetScalarWhereInput>
    NOT?: Enumerable<SetScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    authorId?: IntFilter | number
  }

  export type UserLearningTermUpsertWithWhereUniqueWithoutUserInput = {
    where: UserLearningTermWhereUniqueInput
    update: XOR<UserLearningTermUpdateWithoutUserInput, UserLearningTermUncheckedUpdateWithoutUserInput>
    create: XOR<UserLearningTermCreateWithoutUserInput, UserLearningTermUncheckedCreateWithoutUserInput>
  }

  export type UserLearningTermUpdateWithWhereUniqueWithoutUserInput = {
    where: UserLearningTermWhereUniqueInput
    data: XOR<UserLearningTermUpdateWithoutUserInput, UserLearningTermUncheckedUpdateWithoutUserInput>
  }

  export type UserLearningTermUpdateManyWithWhereWithoutUserInput = {
    where: UserLearningTermScalarWhereInput
    data: XOR<UserLearningTermUpdateManyMutationInput, UserLearningTermUncheckedUpdateManyWithoutLearningTermsInput>
  }

  export type UserCreateWithoutLearningTermsInput = {
    username: string
    password: string
    sets?: SetCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateWithoutLearningTermsInput = {
    id?: number
    username: string
    password: string
    sets?: SetUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserCreateOrConnectWithoutLearningTermsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLearningTermsInput, UserUncheckedCreateWithoutLearningTermsInput>
  }

  export type TermCreateWithoutUsersLearningInput = {
    question: string
    answer: string
    explanation?: string | null
    set: SetCreateNestedOneWithoutTermsInput
    options?: OptionCreateNestedManyWithoutTermInput
  }

  export type TermUncheckedCreateWithoutUsersLearningInput = {
    id?: number
    question: string
    answer: string
    explanation?: string | null
    setId: number
    options?: OptionUncheckedCreateNestedManyWithoutTermInput
  }

  export type TermCreateOrConnectWithoutUsersLearningInput = {
    where: TermWhereUniqueInput
    create: XOR<TermCreateWithoutUsersLearningInput, TermUncheckedCreateWithoutUsersLearningInput>
  }

  export type UserUpsertWithoutLearningTermsInput = {
    update: XOR<UserUpdateWithoutLearningTermsInput, UserUncheckedUpdateWithoutLearningTermsInput>
    create: XOR<UserCreateWithoutLearningTermsInput, UserUncheckedCreateWithoutLearningTermsInput>
  }

  export type UserUpdateWithoutLearningTermsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sets?: SetUpdateManyWithoutAuthorInput
  }

  export type UserUncheckedUpdateWithoutLearningTermsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sets?: SetUncheckedUpdateManyWithoutAuthorInput
  }

  export type TermUpsertWithoutUsersLearningInput = {
    update: XOR<TermUpdateWithoutUsersLearningInput, TermUncheckedUpdateWithoutUsersLearningInput>
    create: XOR<TermCreateWithoutUsersLearningInput, TermUncheckedCreateWithoutUsersLearningInput>
  }

  export type TermUpdateWithoutUsersLearningInput = {
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    set?: SetUpdateOneRequiredWithoutTermsInput
    options?: OptionUpdateManyWithoutTermInput
  }

  export type TermUncheckedUpdateWithoutUsersLearningInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    setId?: IntFieldUpdateOperationsInput | number
    options?: OptionUncheckedUpdateManyWithoutTermInput
  }

  export type TermCreateManySetInput = {
    id?: number
    question: string
    answer: string
    explanation?: string | null
  }

  export type TermUpdateWithoutSetInput = {
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    options?: OptionUpdateManyWithoutTermInput
    usersLearning?: UserLearningTermUpdateManyWithoutTermInput
  }

  export type TermUncheckedUpdateWithoutSetInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
    options?: OptionUncheckedUpdateManyWithoutTermInput
    usersLearning?: UserLearningTermUncheckedUpdateManyWithoutTermInput
  }

  export type TermUncheckedUpdateManyWithoutTermsInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answer?: StringFieldUpdateOperationsInput | string
    explanation?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OptionCreateManyTermInput = {
    id?: number
    option: string
  }

  export type UserLearningTermCreateManyTermInput = {
    id?: number
    userId: number
    remained: number
    learned: boolean
  }

  export type OptionUpdateWithoutTermInput = {
    option?: StringFieldUpdateOperationsInput | string
  }

  export type OptionUncheckedUpdateWithoutTermInput = {
    id?: IntFieldUpdateOperationsInput | number
    option?: StringFieldUpdateOperationsInput | string
  }

  export type OptionUncheckedUpdateManyWithoutOptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    option?: StringFieldUpdateOperationsInput | string
  }

  export type UserLearningTermUpdateWithoutTermInput = {
    remained?: IntFieldUpdateOperationsInput | number
    learned?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutLearningTermsInput
  }

  export type UserLearningTermUncheckedUpdateWithoutTermInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    remained?: IntFieldUpdateOperationsInput | number
    learned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserLearningTermUncheckedUpdateManyWithoutUsersLearningInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    remained?: IntFieldUpdateOperationsInput | number
    learned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SetCreateManyAuthorInput = {
    id?: number
    name: string
  }

  export type UserLearningTermCreateManyUserInput = {
    id?: number
    termId: number
    remained: number
    learned: boolean
  }

  export type SetUpdateWithoutAuthorInput = {
    name?: StringFieldUpdateOperationsInput | string
    terms?: TermUpdateManyWithoutSetInput
  }

  export type SetUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    terms?: TermUncheckedUpdateManyWithoutSetInput
  }

  export type SetUncheckedUpdateManyWithoutSetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserLearningTermUpdateWithoutUserInput = {
    remained?: IntFieldUpdateOperationsInput | number
    learned?: BoolFieldUpdateOperationsInput | boolean
    term?: TermUpdateOneRequiredWithoutUsersLearningInput
  }

  export type UserLearningTermUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    termId?: IntFieldUpdateOperationsInput | number
    remained?: IntFieldUpdateOperationsInput | number
    learned?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserLearningTermUncheckedUpdateManyWithoutLearningTermsInput = {
    id?: IntFieldUpdateOperationsInput | number
    termId?: IntFieldUpdateOperationsInput | number
    remained?: IntFieldUpdateOperationsInput | number
    learned?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}